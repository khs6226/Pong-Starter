{"version":3,"sources":["src/settings.js","src/partials/Board.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Ball2.js","src/partials/Ball3.js","src/partials/Score.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","PADDLE_WIDTH","PADDLE_HEIGHT","BOARD_GAP","SPEED","RADIUS","TEXT_SIZE","KEYS","p1up","p1down","p2up","p2down","pause","start","Board","width","height","svg","rect","document","createElementNS","setAttributeNS","appendChild","line","Paddle","boardHeight","paddleWidth","paddleHeight","initialX","initialY","keyUp","keyDown","x","y","score","speed","addEventListener","event","key","moveUp","moveDown","Math","max","min","text","alert","location","reload","walls","left","top","right","bottom","paddle","Ball","boardWidth","radius","direction","cat1","Audio","cat2","goal","vy","vx","floor","random","abs","hitsTop","hitsBottom","player1","player2","increaseScore","play","paddleSizeChange","reset","endGame","p2","getCoordinates","p1","circle","wallCollision","paddleCollision","goalCollision","Ball2","Score","xPosition","yPosition","textContent","Game","element","paused","gameElement","getElementById","board","boardMid","paddle1","paddle2Gap","paddle2","ball","ball2","ball3","Ball3","score1","score2","innerHTML","render","getScore","game","gameLoop","requestAnimationFrame"],"mappings":";;;AAEO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,UAAA,QAAA,OAAA,QAAA,MAAA,QAAA,UAAA,QAAA,cAAA,QAAA,aAAA,QAAA,YAAA,EAFA,IAAMA,EAAS,6BAEf,QAAA,OAAA,EADA,IAAMC,EAAe,EAAGC,EAAgB,GAAIC,EAAY,GAAIC,EAAQ,GAAIC,EAAS,EAAGC,EAAY,GAChG,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,UAAA,EAAA,QAAA,cAAA,EAAA,QAAA,aAAA,EAAA,IAAMC,EAAO,CAChBC,KAAM,IACNC,OAAQ,IACRC,KAAM,UACNC,OAAQ,YACRC,MAAO,IACPC,MAAO,KANJ,QAAA,KAAA;;ACuBJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzBH,IAAA,EAAA,QAAA,eAyBG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAvBkBC,IAAAA,EAuBlB,WAtBWC,SAAAA,EAAAA,EAAOC,GAAQ,EAAA,KAAA,GAClBD,KAAAA,MAAQA,EACRC,KAAAA,OAASA,EAoBjB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAlBMC,MAAAA,SAAAA,GACDC,IAAAA,EAAOC,SAASC,gBAAgBpB,EAAzB,OAAiC,QAC5CkB,EAAKG,eAAe,KAAM,QAAS,KAAKN,OACxCG,EAAKG,eAAe,KAAM,SAAU,KAAKL,QACzCE,EAAKG,eAAe,KAAM,OAAQ,WAClCH,EAAKG,eAAe,KAAM,IAAK,GAC/BH,EAAKG,eAAe,KAAM,IAAK,GAC/BJ,EAAIK,YAAYJ,GAEZK,IAAAA,EAAOJ,SAASC,gBAAgBpB,EAAzB,OAAiC,QAC5CuB,EAAKF,eAAe,KAAM,KAAM,KAAKN,MAAM,GAC3CQ,EAAKF,eAAe,KAAM,KAAM,GAChCE,EAAKF,eAAe,KAAM,KAAM,KAAKN,MAAM,GAC3CQ,EAAKF,eAAe,KAAM,KAAM,KAAKL,QACrCO,EAAKF,eAAe,KAAM,SAAU,SACpCE,EAAKF,eAAe,KAAM,mBAAoB,SAC9CE,EAAKF,eAAe,KAAM,eAAgB,GAC1CJ,EAAIK,YAAYC,OACjB,EAAA,GAAA,QAAA,QAAA;;ACiDE,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1EL,IAAA,EAAA,QAAA,eA0EK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxEgBC,IAAAA,EAwEhB,WAvEWC,SAAAA,EAAAA,EAAaC,EAAaC,EAAcC,EAAUC,EAAUC,EAAOC,GAAS,IAAA,EAAA,KAAA,EAAA,KAAA,GAC/EN,KAAAA,YAAcA,EACdC,KAAAA,YAAcA,EACdC,KAAAA,aAAeA,EACfK,KAAAA,EAAIJ,EACJK,KAAAA,EAAIJ,EACJK,KAAAA,MAAQ,EACRC,KAAAA,MAAQ/B,EAAb,MACAe,SAASiB,iBAAiB,UAAW,SAAAC,GAC1BA,OAAAA,EAAMC,KACJR,KAAAA,EACL,EAAKS,SACL,MACKR,KAAAA,EACL,EAAKS,cAyDhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBAnDc,MAAA,WACNN,KAAAA,UAkDR,CAAA,IAAA,WA/CS,MAAA,WACC,OAAA,KAAKA,QA8Cf,CAAA,IAAA,SA3CQ,MAAA,WACAD,KAAAA,EAAIQ,KAAKC,IAAI,EAAG,KAAKT,EAAE,KAAKE,SA0CpC,CAAA,IAAA,WAvCU,MAAA,WACFF,KAAAA,EAAIQ,KAAKE,IAAI,KAAKlB,YAAY,KAAKE,aAAc,KAAKM,EAAI,KAAKE,SAsCvE,CAAA,IAAA,mBAnCkB,MAAA,WACR,OAAA,KAAKD,OACH,KAAA,EACA,KAAA,EACA,KAAA,EACAP,KAAAA,aAAmC,EAApB,KAAKA,aAAmB,KA8BnD,CAAA,IAAA,UAzBOiB,MAAAA,SAAAA,GACe,KAAf,KAAKV,QACLW,MAAMD,GACNzB,SAAS2B,SAASC,YAsBzB,CAAA,IAAA,iBAlBe,MAAA,WAOLC,MANO,CACVC,KAAO,KAAKjB,EACZkB,IAAM,KAAKjB,EACXkB,MAAQ,KAAKnB,EAAI,KAAKN,YACtB0B,OAAS,KAAKnB,EAAI,KAAKN,gBAa9B,CAAA,IAAA,SARMV,MAAAA,SAAAA,GACCoC,IAAAA,EAASlC,SAASC,gBAAgBpB,EAAzB,OAAiC,QAC9CqD,EAAOhC,eAAe,KAAM,IAAK,KAAKW,GACtCqB,EAAOhC,eAAe,KAAM,IAAK,KAAKY,GACtCoB,EAAOhC,eAAe,KAAM,QAAS,KAAKK,aAC1C2B,EAAOhC,eAAe,KAAM,SAAU,KAAKM,cAC3C0B,EAAOhC,eAAe,KAAM,OAAQ,SACpCJ,EAAIK,YAAY+B,OACnB,EAAA,GAAA,QAAA,QAAA;;;;;;;;AC6BF,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvGH,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCAoGG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlGkBC,IAAAA,EAkGlB,WAjGWC,SAAAA,EAAAA,EAAY9B,EAAa+B,GAAQ,EAAA,KAAA,GACpCD,KAAAA,WAAaA,EACb9B,KAAAA,YAAcA,EACd+B,KAAAA,OAASA,EACTC,KAAAA,WAAa,EACbC,KAAAA,KAAO,IAAIC,MAAMD,EAAV,SACPE,KAAAA,KAAO,IAAID,MAAMC,EAAV,SACPC,KAAAA,KAAO,IAAIF,MAAME,EAAV,SACPhD,KAAAA,QAyFR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAtFO,MAAA,WAAA,IAAA,EAAA,KACDmB,KAAAA,EAAI,KAAKuB,WAAW,EACpBtB,KAAAA,EAAI,KAAKR,YAAY,EACrBqC,KAAAA,GAAK,EACLC,KAAAA,GAAK,EACP5C,SAASiB,iBAAiB,UAAW,SAACC,GACpCA,GAAAA,EAAMC,MAAQ/B,EAAKM,KAAAA,MACb,KAAY,IAAZ,EAAKiD,IACV,EAAKA,GAAKrB,KAAKuB,MAAoB,EAAdvB,KAAKwB,SAAa,KACvC,EAAKF,GAAK,EAAKN,WAAa,EAAEhB,KAAKyB,IAAI,EAAKJ,SA6EnD,CAAA,IAAA,QAxEM,MAAA,WAKE,IAJF9B,KAAAA,EAAI,KAAKuB,WAAW,EACpBtB,KAAAA,EAAI,KAAKR,YAAY,EACrBqC,KAAAA,GAAK,EACLC,KAAAA,GAAK,EACS,IAAZ,KAAKD,IACLA,KAAAA,GAAKrB,KAAKuB,MAAoB,EAAdvB,KAAKwB,SAAa,KAEpCF,KAAAA,GAAK,KAAKN,WAAa,EAAEhB,KAAKyB,IAAI,KAAKJ,OAgE7C,CAAA,IAAA,gBA7De,MAAA,WACRK,IAAAA,EAAU,KAAKlC,EAAI,KAAKuB,QAAU,EAClCY,EAAa,KAAKnC,EAAI,KAAKuB,QAAU,KAAK/B,aAC5C0C,GAAWC,KACRN,KAAAA,IAAgB,EAAX,KAAKA,MAyDlB,CAAA,IAAA,gBArDaO,MAAAA,SAAAA,EAASC,GACjB,KAAKtC,GAAK,GACZsC,EAAQC,gBACHd,KAAAA,WAA8B,EAAlB,KAAKA,UACjBI,KAAAA,KAAKW,OACVF,EAAQG,mBACHC,KAAAA,QACLJ,EAAQK,QAAQ,oBACP,KAAK3C,GAAK,KAAKuB,aACxBc,EAAQE,gBACHd,KAAAA,WAA8B,EAAlB,KAAKA,UACjBI,KAAAA,KAAKW,OACVH,EAAQI,mBACHC,KAAAA,QACLL,EAAQM,QAAQ,qBAuCnB,CAAA,IAAA,kBAnCeN,MAAAA,SAAAA,EAASC,GACnB,GAAA,KAAKP,GAAK,EAAG,CACTa,IAAAA,EAAKN,EAAQO,iBACf,KAAK7C,EAAI,KAAKwB,QAAUoB,EAAG3B,MAC3B,KAAKjB,EAAI,KAAKwB,QAAUoB,EAAGzB,OAC3B,KAAKlB,EAAI,KAAKuB,QAAUoB,EAAG1B,KAC3B,KAAKjB,EAAI,KAAKuB,QAAUoB,EAAGxB,SACpBM,KAAAA,KAAKc,OACLT,KAAAA,IAAgB,EAAX,KAAKA,QAEhB,CACCe,IAAAA,EAAKT,EAAQQ,iBACf,KAAK7C,EAAI,KAAKwB,QAAUsB,EAAG3B,OAC3B,KAAKnB,EAAI,KAAKwB,QAAUsB,EAAG7B,MAC3B,KAAKhB,EAAI,KAAKuB,QAAUsB,EAAG5B,KAC3B,KAAKjB,EAAI,KAAKuB,QAAUsB,EAAG1B,SACpBQ,KAAAA,KAAKY,OACLT,KAAAA,IAAgB,EAAX,KAAKA,OAkBxB,CAAA,IAAA,SAbM9C,MAAAA,SAAAA,EAAKoD,EAASC,GACfS,IAAAA,EAAS5D,SAASC,gBAAgBpB,EAAzB,OAAiC,UAC9C+E,EAAO1D,eAAe,KAAM,OAAQ,SACpC0D,EAAO1D,eAAe,KAAM,IAAK,KAAKmC,QACtCuB,EAAO1D,eAAe,KAAM,KAAM,KAAKW,GACvC+C,EAAO1D,eAAe,KAAM,KAAM,KAAKY,GAClCD,KAAAA,GAAK,KAAK+B,GACV9B,KAAAA,GAAK,KAAK6B,GACVkB,KAAAA,gBACAC,KAAAA,gBAAgBZ,EAASC,GACzBY,KAAAA,cAAcb,EAASC,GAC5BrD,EAAIK,YAAYyD,OAEjB,EAAA,GAAA,QAAA,QAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxGH,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCAqGG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnGkBI,IAAAA,EAmGlB,WAlGW5B,SAAAA,EAAAA,EAAY9B,EAAa+B,GAAQ,EAAA,KAAA,GACpCD,KAAAA,WAAaA,EACb9B,KAAAA,YAAcA,EACd+B,KAAAA,OAASA,EACTC,KAAAA,WAAa,EACbC,KAAAA,KAAO,IAAIC,MAAMD,EAAV,SACPE,KAAAA,KAAO,IAAID,MAAMC,EAAV,SACPC,KAAAA,KAAO,IAAIF,MAAME,EAAV,SACPhD,KAAAA,QA0FR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAvFM,MAAA,WAAA,IAAA,EAAA,KACAmB,KAAAA,EAAI,KAAKuB,WAAW,EACpBtB,KAAAA,EAAI,KAAKR,YAAY,EACrBqC,KAAAA,GAAK,EACLC,KAAAA,GAAK,EACP5C,SAASiB,iBAAiB,UAAW,SAACC,GACpCA,GAAAA,EAAMC,MAAQ/B,EAAKM,KAAAA,MACb,KAAY,IAAZ,EAAKiD,IACV,EAAKA,GAAKrB,KAAKuB,MAAoB,EAAdvB,KAAKwB,SAAa,GACvC,EAAKF,GAAK,EAAKN,WAAa,EAAEhB,KAAKyB,IAAI,EAAKJ,SA8EnD,CAAA,IAAA,QAxEM,MAAA,WAKE,IAJF9B,KAAAA,EAAI,KAAKuB,WAAW,EACpBtB,KAAAA,EAAI,KAAKR,YAAY,EACrBqC,KAAAA,GAAK,EACLC,KAAAA,GAAK,EACS,IAAZ,KAAKD,IACLA,KAAAA,GAAKrB,KAAKuB,MAAoB,EAAdvB,KAAKwB,SAAa,GAEpCF,KAAAA,GAAK,KAAKN,WAAa,EAAEhB,KAAKyB,IAAI,KAAKJ,OAgE7C,CAAA,IAAA,gBA7De,MAAA,WACRK,IAAAA,EAAU,KAAKlC,EAAI,KAAKuB,QAAU,EAClCY,EAAa,KAAKnC,EAAI,KAAKuB,QAAU,KAAK/B,aAC5C0C,GAAWC,KACRN,KAAAA,IAAgB,EAAX,KAAKA,MAyDlB,CAAA,IAAA,gBArDaO,MAAAA,SAAAA,EAASC,GACjB,KAAKtC,GAAK,GACZsC,EAAQC,gBACHd,KAAAA,WAA8B,EAAlB,KAAKA,UACjBI,KAAAA,KAAKW,OACVF,EAAQG,mBACHC,KAAAA,QACLJ,EAAQK,QAAQ,oBACP,KAAK3C,GAAK,KAAKuB,aACxBc,EAAQE,gBACHd,KAAAA,WAA8B,EAAlB,KAAKA,UACjBI,KAAAA,KAAKW,OACVH,EAAQI,mBACHC,KAAAA,QACLL,EAAQM,QAAQ,qBAuCnB,CAAA,IAAA,kBAnCeN,MAAAA,SAAAA,EAASC,GACnB,GAAA,KAAKP,GAAK,EAAG,CACTa,IAAAA,EAAKN,EAAQO,iBACf,KAAK7C,EAAI,KAAKwB,QAAUoB,EAAG3B,MAC3B,KAAKjB,EAAI,KAAKwB,QAAUoB,EAAGzB,OAC3B,KAAKlB,EAAI,KAAKuB,QAAUoB,EAAG1B,KAC3B,KAAKjB,EAAI,KAAKuB,QAAUoB,EAAGxB,SACpBM,KAAAA,KAAKc,OACLT,KAAAA,IAAgB,EAAX,KAAKA,QAEhB,CACCe,IAAAA,EAAKT,EAAQQ,iBACf,KAAK7C,EAAI,KAAKwB,QAAUsB,EAAG3B,OAC3B,KAAKnB,EAAI,KAAKwB,QAAUsB,EAAG7B,MAC3B,KAAKhB,EAAI,KAAKuB,QAAUsB,EAAG5B,KAC3B,KAAKjB,EAAI,KAAKuB,QAAUsB,EAAG1B,SACpBQ,KAAAA,KAAKY,OACLT,KAAAA,IAAgB,EAAX,KAAKA,OAkBxB,CAAA,IAAA,SAbM9C,MAAAA,SAAAA,EAAKoD,EAASC,GACfS,IAAAA,EAAS5D,SAASC,gBAAgBpB,EAAzB,OAAiC,UAC9C+E,EAAO1D,eAAe,KAAM,OAAQ,UACpC0D,EAAO1D,eAAe,KAAM,IAAK,KAAKmC,QACtCuB,EAAO1D,eAAe,KAAM,KAAM,KAAKW,GACvC+C,EAAO1D,eAAe,KAAM,KAAM,KAAKY,GAClCD,KAAAA,GAAK,KAAK+B,GACV9B,KAAAA,GAAK,KAAK6B,GACVkB,KAAAA,gBACAC,KAAAA,gBAAgBZ,EAASC,GACzBY,KAAAA,cAAcb,EAASC,GAC5BrD,EAAIK,YAAYyD,OAEjB,EAAA,GAAA,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxGH,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,iCAqGG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnGkBI,IAAAA,EAmGlB,WAlGW5B,SAAAA,EAAAA,EAAY9B,EAAa+B,GAAQ,EAAA,KAAA,GACpCD,KAAAA,WAAaA,EACb9B,KAAAA,YAAcA,EACd+B,KAAAA,OAASA,EACTC,KAAAA,WAAa,EACbC,KAAAA,KAAO,IAAIC,MAAMD,EAAV,SACPE,KAAAA,KAAO,IAAID,MAAMC,EAAV,SACPC,KAAAA,KAAO,IAAIF,MAAME,EAAV,SACPhD,KAAAA,QA0FR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAvFM,MAAA,WAAA,IAAA,EAAA,KACAmB,KAAAA,EAAI,KAAKuB,WAAW,EACpBtB,KAAAA,EAAI,KAAKR,YAAY,EACrBqC,KAAAA,GAAK,EACLC,KAAAA,GAAK,EACP5C,SAASiB,iBAAiB,UAAW,SAACC,GACpCA,GAAAA,EAAMC,MAAQ/B,EAAKM,KAAAA,MACb,KAAY,IAAZ,EAAKiD,IACV,EAAKA,GAAKrB,KAAKuB,MAAoB,EAAdvB,KAAKwB,SAAa,GACvC,EAAKF,GAAK,EAAKN,WAAa,EAAEhB,KAAKyB,IAAI,EAAKJ,SA8EnD,CAAA,IAAA,QAxEM,MAAA,WAKE,IAJF9B,KAAAA,EAAI,KAAKuB,WAAW,EACpBtB,KAAAA,EAAI,KAAKR,YAAY,EACrBqC,KAAAA,GAAK,EACLC,KAAAA,GAAK,EACS,IAAZ,KAAKD,IACLA,KAAAA,GAAKrB,KAAKuB,MAAoB,EAAdvB,KAAKwB,SAAa,GAEpCF,KAAAA,GAAK,KAAKN,WAAa,EAAEhB,KAAKyB,IAAI,KAAKJ,OAgE7C,CAAA,IAAA,gBA7De,MAAA,WACRK,IAAAA,EAAU,KAAKlC,EAAI,KAAKuB,QAAU,EAClCY,EAAa,KAAKnC,EAAI,KAAKuB,QAAU,KAAK/B,aAC5C0C,GAAWC,KACRN,KAAAA,IAAgB,EAAX,KAAKA,MAyDlB,CAAA,IAAA,gBArDaO,MAAAA,SAAAA,EAASC,GACjB,KAAKtC,GAAK,GACZsC,EAAQC,gBACHd,KAAAA,WAA8B,EAAlB,KAAKA,UACjBI,KAAAA,KAAKW,OACVF,EAAQG,mBACHC,KAAAA,QACLJ,EAAQK,QAAQ,oBACP,KAAK3C,GAAK,KAAKuB,aACxBc,EAAQE,gBACHd,KAAAA,WAA8B,EAAlB,KAAKA,UACjBI,KAAAA,KAAKW,OACVH,EAAQI,mBACHC,KAAAA,QACLL,EAAQM,QAAQ,qBAuCnB,CAAA,IAAA,kBAnCeN,MAAAA,SAAAA,EAASC,GACnB,GAAA,KAAKP,GAAK,EAAG,CACTa,IAAAA,EAAKN,EAAQO,iBACf,KAAK7C,EAAI,KAAKwB,QAAUoB,EAAG3B,MAC3B,KAAKjB,EAAI,KAAKwB,QAAUoB,EAAGzB,OAC3B,KAAKlB,EAAI,KAAKuB,QAAUoB,EAAG1B,KAC3B,KAAKjB,EAAI,KAAKuB,QAAUoB,EAAGxB,SACpBM,KAAAA,KAAKc,OACLT,KAAAA,IAAgB,EAAX,KAAKA,QAEhB,CACCe,IAAAA,EAAKT,EAAQQ,iBACf,KAAK7C,EAAI,KAAKwB,QAAUsB,EAAG3B,OAC3B,KAAKnB,EAAI,KAAKwB,QAAUsB,EAAG7B,MAC3B,KAAKhB,EAAI,KAAKuB,QAAUsB,EAAG5B,KAC3B,KAAKjB,EAAI,KAAKuB,QAAUsB,EAAG1B,SACpBQ,KAAAA,KAAKY,OACLT,KAAAA,IAAgB,EAAX,KAAKA,OAkBxB,CAAA,IAAA,SAbM9C,MAAAA,SAAAA,EAAKoD,EAASC,GACfS,IAAAA,EAAS5D,SAASC,gBAAgBpB,EAAzB,OAAiC,UAC9C+E,EAAO1D,eAAe,KAAM,OAAQ,cACpC0D,EAAO1D,eAAe,KAAM,IAAK,KAAKmC,QACtCuB,EAAO1D,eAAe,KAAM,KAAM,KAAKW,GACvC+C,EAAO1D,eAAe,KAAM,KAAM,KAAKY,GAClCD,KAAAA,GAAK,KAAK+B,GACV9B,KAAAA,GAAK,KAAK6B,GACVkB,KAAAA,gBACAC,KAAAA,gBAAgBZ,EAASC,GACzBY,KAAAA,cAAcb,EAASC,GAC5BrD,EAAIK,YAAYyD,OAEjB,EAAA,GAAA,QAAA,QAAA;;ACvFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAjBH,IAAA,EAAA,QAAA,eAiBG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAfkBK,IAAAA,EAelB,WAdWC,SAAAA,EAAAA,EAAWC,GAAW,EAAA,KAAA,GACzBtD,KAAAA,EAAIqD,EACJpD,KAAAA,EAAIqD,EAYZ,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAVMrE,MAAAA,SAAAA,EAAKiB,GACNU,IAAAA,EAAOzB,SAASC,gBAAgBpB,EAAzB,OAAiC,QAC5C4C,EAAKvB,eAAe,KAAM,OAAQ,SAClCuB,EAAKvB,eAAe,KAAM,YAAaf,EAAvC,WACAsC,EAAKvB,eAAe,KAAM,cAAe,8BACzCuB,EAAKvB,eAAe,KAAM,IAAK,KAAKW,GACpCY,EAAKvB,eAAe,KAAM,IAAK,KAAKY,GACpCW,EAAK2C,YAAcrD,EACnBjB,EAAIK,YAAYsB,OAEjB,EAAA,GAAA,QAAA,QAAA;;ACwCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzDH,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,YAmDG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjDkB4C,IAAAA,EAiDlB,WAhDWC,SAAAA,EAAAA,EAAS1E,EAAOC,GAAQ,IAAA,EAAA,KAAA,EAAA,KAAA,GAC7ByE,KAAAA,QAAUA,EACV1E,KAAAA,MAAQA,EACRC,KAAAA,OAASA,EACT0E,KAAAA,QAAS,EAETC,KAAAA,YAAcxE,SAASyE,eAAe,KAAKH,SAC3CI,KAAAA,MAAQ,IAAI/E,EAAJ,QAAU,KAAKC,MAAO,KAAKC,QAClC8E,IAAAA,GAAY,KAAK9E,OAASd,EAAf,eAA8B,EAC1C6F,KAAAA,QAAU,IAAIvE,EAAJ,QAAW,KAAKR,OAAQf,EAAxB,aAAsCC,EAAtC,cAAqDC,EAArD,UAAgE2F,EAAUvF,EAAKC,KAAAA,KAAMD,EAAKE,KAAAA,QACnGuF,IAAAA,EAAa,KAAKjF,MAAMZ,EAAX,UAAqBF,EAAxC,aACKgG,KAAAA,QAAU,IAAIzE,EAAJ,QAAW,KAAKR,OAAQf,EAAxB,aAAsCC,EAAtC,cAAqD8F,EAAYF,EAAUvF,EAAKG,KAAAA,KAAMH,EAAKI,KAAAA,QACrGuF,KAAAA,KAAO,IAAI5C,EAAJ,QAAS,KAAKvC,MAAO,KAAKC,OAAQX,EAAlC,QACP8F,KAAAA,MAAQ,IAAIhB,EAAJ,QAAU,KAAKpE,MAAO,KAAKC,OAAQX,EAAnC,QACR+F,KAAAA,MAAQ,IAAIC,EAAJ,QAAU,KAAKtF,MAAO,KAAKC,OAAQX,EAAnC,QACRiG,KAAAA,OAAS,IAAIlB,EAAJ,QAAU,KAAKrE,MAAM,EAAI,GAAI,IACtCwF,KAAAA,OAAS,IAAInB,EAAJ,QAAU,KAAKrE,MAAM,EAAI,GAAI,IAC3CI,SAASiB,iBAAiB,UAAW,SAACC,GACjCA,EAAMC,MAAQ/B,EAAKK,KAAAA,QACpB,EAAK8E,QAAU,EAAKA,UA6BzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAvBQ,MAAA,WACH,IAAA,KAAKA,OAAL,CAGCC,KAAAA,YAAYa,UAAY,GACzBvF,IAAAA,EAAME,SAASC,gBAAgBpB,EAAzB,OAAiC,OAC3CiB,EAAII,eAAe,KAAM,QAAS,KAAKN,OACvCE,EAAII,eAAe,KAAM,SAAU,KAAKL,QACxCC,EAAII,eAAe,KAAM,UAAkB,OAAA,OAAA,KAAKN,MAAS,KAAA,OAAA,KAAKC,SACzD2E,KAAAA,YAAYrE,YAAYL,GAExB4E,KAAAA,MAAMY,OAAOxF,GACb8E,KAAAA,QAAQU,OAAOxF,GACfgF,KAAAA,QAAQQ,OAAOxF,GACfqF,KAAAA,OAAOG,OAAOxF,EAAK,KAAK8E,QAAQW,YAChCH,KAAAA,OAAOE,OAAOxF,EAAK,KAAKgF,QAAQS,YAChCR,KAAAA,KAAKO,OAAOxF,EAAK,KAAK8E,QAAS,KAAKE,SACtC,KAAKF,QAAQW,YAAc,GAAK,KAAKT,QAAQS,YAAc,GACvDP,KAAAA,MAAMM,OAAOxF,EAAK,KAAK8E,QAAS,KAAKE,SAExC,KAAKF,QAAQW,YAAc,GAAK,KAAKT,QAAQS,YAAc,GACxDN,KAAAA,MAAMK,OAAOxF,EAAK,KAAK8E,QAAS,KAAKE,cAE7C,EAAA,GAAA,QAAA,QAAA;;ACnDH,aANA,QAAA,qBACA,IAAA,EAAA,EAAA,QAAA,oBAKA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAFA,IAAMU,EAAO,IAAInB,EAAJ,QAAS,OAAQ,IAAK,MAEnC,SAAUoB,IACRD,EAAKF,SACLI,sBAAsBD,GAFxB","file":"src.1489eb5b.js","sourceRoot":"..","sourcesContent":["export const SVG_NS = \"http://www.w3.org/2000/svg\";\r\nexport const PADDLE_WIDTH = 8, PADDLE_HEIGHT = 56, BOARD_GAP = 10, SPEED = 10, RADIUS = 8, TEXT_SIZE = 30;\r\nexport const KEYS = {\r\n    p1up: 'w',\r\n    p1down: 's',\r\n    p2up: 'ArrowUp',\r\n    p2down: 'ArrowDown',\r\n    pause: 'p',\r\n    start: ' '\r\n};\r\n","import {SVG_NS} from '../settings';\r\n\r\nexport default class Board {\r\n  constructor(width, height) {\r\n      this.width = width;\r\n      this.height = height;\r\n  }\r\n  render(svg){\r\n    let rect = document.createElementNS(SVG_NS, 'rect');\r\n    rect.setAttributeNS(null, \"width\", this.width);\r\n    rect.setAttributeNS(null, \"height\", this.height);\r\n    rect.setAttributeNS(null, \"fill\", \"#353535\");\r\n    rect.setAttributeNS(null, \"x\", 0);\r\n    rect.setAttributeNS(null, \"y\", 0);\r\n    svg.appendChild(rect);\r\n    \r\n    let line = document.createElementNS(SVG_NS, 'line');\r\n    line.setAttributeNS(null, \"x1\", this.width/2);\r\n    line.setAttributeNS(null, \"y1\", 0);\r\n    line.setAttributeNS(null, \"x2\", this.width/2);\r\n    line.setAttributeNS(null, \"y2\", this.height);\r\n    line.setAttributeNS(null, \"stroke\", \"white\");\r\n    line.setAttributeNS(null, \"stroke-dasharray\", \"20 10\");\r\n    line.setAttributeNS(null, \"stroke-width\", 2);\r\n    svg.appendChild(line);\r\n  }\r\n}","import {SVG_NS, SPEED} from '../settings';\r\n\r\nexport default class Paddle {\r\n    constructor(boardHeight, paddleWidth, paddleHeight, initialX, initialY, keyUp, keyDown) {\r\n        this.boardHeight = boardHeight;\r\n        this.paddleWidth = paddleWidth;\r\n        this.paddleHeight = paddleHeight;\r\n        this.x = initialX;\r\n        this.y = initialY;\r\n        this.score = 0;\r\n        this.speed = SPEED;\r\n        document.addEventListener(\"keydown\", event => {\r\n            switch(event.key) {\r\n                case keyUp:\r\n                this.moveUp();\r\n                break;\r\n                case keyDown:\r\n                this.moveDown();\r\n                break;\r\n            }\r\n        });\r\n    }\r\n    \r\n    increaseScore(){\r\n        this.score++;\r\n    }\r\n\r\n    getScore(){\r\n        return this.score;\r\n    }\r\n    \r\n    moveUp() { \r\n        this.y = Math.max(0, this.y-this.speed);\r\n        }\r\n    \r\n    moveDown() {\r\n        this.y = Math.min(this.boardHeight-this.paddleHeight, this.y + this.speed);\r\n    }\r\n\r\n    paddleSizeChange() {\r\n        switch(this.score) {\r\n            case 4:\r\n            case 7:\r\n            case 9:\r\n            this.paddleHeight = this.paddleHeight * 2 / 3;\r\n            break;\r\n          }\r\n    }\r\n\r\n    endGame(text) {\r\n        if (this.score === 15) {\r\n            alert(text);\r\n            document.location.reload();\r\n        }\r\n    }\r\n    \r\n    getCoordinates(){\r\n        const walls = {\r\n            left : this.x,\r\n            top : this.y,\r\n            right : this.x + this.paddleWidth,\r\n            bottom : this.y + this.paddleHeight\r\n        }\r\n        return walls;\r\n    }\r\n\r\n    render(svg){\r\n        let paddle = document.createElementNS(SVG_NS, 'rect');\r\n        paddle.setAttributeNS(null, \"x\", this.x);\r\n        paddle.setAttributeNS(null, \"y\", this.y);\r\n        paddle.setAttributeNS(null, \"width\", this.paddleWidth);\r\n        paddle.setAttributeNS(null, \"height\", this.paddleHeight);\r\n        paddle.setAttributeNS(null, \"fill\", \"white\");\r\n        svg.appendChild(paddle);\r\n    }\r\n}","import {SVG_NS, KEYS} from '../settings';\r\nimport cat1 from '../../public/sounds/cat1.wav';\r\nimport cat2 from '../../public/sounds/cat2.mp3';\r\nimport goal from '../../public/sounds/goal.mp3';\r\n\r\nexport default class Ball {\r\n  constructor(boardWidth, boardHeight, radius) {\r\n      this.boardWidth = boardWidth;\r\n      this.boardHeight = boardHeight;\r\n      this.radius = radius;\r\n      this.direction = -1;\r\n      this.cat1 = new Audio(cat1);\r\n      this.cat2 = new Audio(cat2);\r\n      this.goal = new Audio(goal);\r\n      this.start();\r\n  }\r\n  \r\n  start() {\r\n    this.x = this.boardWidth/2;\r\n    this.y = this.boardHeight/2;\r\n    this.vy = 0;\r\n    this.vx = 0;\r\n    if(document.addEventListener('keydown', (event) => {\r\n      if(event.key === KEYS.start) {\r\n        while (this.vy === 0){\r\n          this.vy = Math.floor(Math.random()*5 - 2.5);\r\n          this.vx = this.direction * (4-Math.abs(this.vy));\r\n        }\r\n      }\r\n    }));\r\n  }\r\n  reset(){\r\n    this.x = this.boardWidth/2;\r\n    this.y = this.boardHeight/2;\r\n    this.vy = 0;\r\n    this.vx = 0;\r\n    while (this.vy === 0){\r\n      this.vy = Math.floor(Math.random()*5 - 2.5);\r\n    }\r\n    this.vx = this.direction * (4-Math.abs(this.vy));\r\n  }\r\n    \r\n  wallCollision() {\r\n    const hitsTop = this.y - this.radius <= 0;\r\n    const hitsBottom = this.y + this.radius >= this.boardHeight;\r\n    if (hitsTop || hitsBottom) {\r\n      this.vy = this.vy * -1;\r\n    }\r\n  }\r\n\r\n  goalCollision(player1, player2) {\r\n    if (this.x <= 0) {\r\n      player2.increaseScore();\r\n      this.direction = this.direction * -1;\r\n      this.goal.play();\r\n      player2.paddleSizeChange();\r\n      this.reset();\r\n      player2.endGame(\"Right side win!\");\r\n    } else if (this.x >= this.boardWidth) {\r\n      player1.increaseScore();\r\n      this.direction = this.direction * -1;\r\n      this.goal.play();\r\n      player1.paddleSizeChange();\r\n      this.reset();\r\n      player1.endGame(\"Left side win!\");\r\n    }\r\n  }\r\n\r\n  paddleCollision(player1, player2) {\r\n    if (this.vx > 0) {\r\n      const p2 = player2.getCoordinates();\r\n      if (this.x + this.radius >= p2.left &&\r\n          this.x + this.radius <= p2.right &&\r\n          this.y + this.radius >= p2.top &&\r\n          this.y - this.radius <= p2.bottom) {\r\n            this.cat1.play();\r\n            this.vx = this.vx * -1;\r\n          }\r\n    } else {\r\n      const p1 = player1.getCoordinates();\r\n      if (this.x - this.radius <= p1.right &&\r\n          this.x - this.radius >= p1.left &&\r\n          this.y + this.radius >= p1.top &&\r\n          this.y - this.radius <= p1.bottom) {\r\n            this.cat2.play();\r\n            this.vx = this.vx * -1;\r\n        }\r\n      }\r\n    }\r\n\r\n  render(svg, player1, player2){\r\n    let circle = document.createElementNS(SVG_NS, 'circle');\r\n    circle.setAttributeNS(null, \"fill\", \"white\");\r\n    circle.setAttributeNS(null, \"r\", this.radius);\r\n    circle.setAttributeNS(null, \"cx\", this.x);\r\n    circle.setAttributeNS(null, \"cy\", this.y);\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n    this.wallCollision();\r\n    this.paddleCollision(player1, player2);\r\n    this.goalCollision(player1, player2);\r\n    svg.appendChild(circle);\r\n\r\n  }\r\n}","import {SVG_NS, KEYS} from '../settings';\r\nimport cat1 from '../../public/sounds/cat1.wav';\r\nimport cat2 from '../../public/sounds/cat2.mp3';\r\nimport goal from '../../public/sounds/goal.mp3';\r\n\r\nexport default class Ball2 {\r\n  constructor(boardWidth, boardHeight, radius) {\r\n      this.boardWidth = boardWidth;\r\n      this.boardHeight = boardHeight;\r\n      this.radius = radius;\r\n      this.direction = -1;\r\n      this.cat1 = new Audio(cat1);\r\n      this.cat2 = new Audio(cat2);\r\n      this.goal = new Audio(goal);\r\n      this.start();\r\n  }\r\n  \r\n  start(){\r\n    this.x = this.boardWidth/2;\r\n    this.y = this.boardHeight/3;\r\n    this.vy = 0;\r\n    this.vx = 0;\r\n    if(document.addEventListener('keydown', (event) => {\r\n      if(event.key === KEYS.start) {\r\n        while (this.vy === 0){\r\n          this.vy = Math.floor(Math.random()*4 - 2);\r\n          this.vx = this.direction * (3-Math.abs(this.vy));\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  reset(){\r\n    this.x = this.boardWidth/2;\r\n    this.y = this.boardHeight/2;\r\n    this.vy = 0;\r\n    this.vx = 0;\r\n    while (this.vy === 0){\r\n      this.vy = Math.floor(Math.random()*4 - 2);\r\n    }\r\n    this.vx = this.direction * (3-Math.abs(this.vy));\r\n  }\r\n\r\n  wallCollision() {\r\n    const hitsTop = this.y - this.radius <= 0;\r\n    const hitsBottom = this.y + this.radius >= this.boardHeight;\r\n    if (hitsTop || hitsBottom) {\r\n      this.vy = this.vy * -1;\r\n    }\r\n  }\r\n\r\n  goalCollision(player1, player2) {\r\n    if (this.x <= 0) {\r\n      player2.increaseScore();\r\n      this.direction = this.direction * -1;\r\n      this.goal.play();\r\n      player2.paddleSizeChange();\r\n      this.reset();\r\n      player2.endGame(\"Right side win!\");\r\n    } else if (this.x >= this.boardWidth) {\r\n      player1.increaseScore();\r\n      this.direction = this.direction * -1;\r\n      this.goal.play();\r\n      player1.paddleSizeChange();\r\n      this.reset();\r\n      player1.endGame(\"Left side win!\");\r\n    }\r\n  }\r\n\r\n  paddleCollision(player1, player2) {\r\n    if (this.vx > 0) {\r\n      const p2 = player2.getCoordinates();\r\n      if (this.x + this.radius >= p2.left &&\r\n          this.x + this.radius <= p2.right &&\r\n          this.y + this.radius >= p2.top &&\r\n          this.y - this.radius <= p2.bottom) {\r\n            this.cat1.play();\r\n            this.vx = this.vx * -1;\r\n          }\r\n    } else {\r\n      const p1 = player1.getCoordinates();\r\n      if (this.x - this.radius <= p1.right &&\r\n          this.x - this.radius >= p1.left &&\r\n          this.y + this.radius >= p1.top &&\r\n          this.y - this.radius <= p1.bottom) {\r\n            this.cat2.play();\r\n            this.vx = this.vx * -1;\r\n        }\r\n      }\r\n    }\r\n\r\n  render(svg, player1, player2){\r\n    let circle = document.createElementNS(SVG_NS, 'circle');\r\n    circle.setAttributeNS(null, \"fill\", \"yellow\");\r\n    circle.setAttributeNS(null, \"r\", this.radius);\r\n    circle.setAttributeNS(null, \"cx\", this.x);\r\n    circle.setAttributeNS(null, \"cy\", this.y);\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n    this.wallCollision();\r\n    this.paddleCollision(player1, player2);\r\n    this.goalCollision(player1, player2);\r\n    svg.appendChild(circle);\r\n\r\n  }\r\n}","import {SVG_NS, KEYS} from '../settings';\r\nimport cat1 from '../../public/sounds/cat1.wav';\r\nimport cat2 from '../../public/sounds/cat2.mp3';\r\nimport goal from '../../public/sounds/goal.mp3';\r\n\r\nexport default class Ball2 {\r\n  constructor(boardWidth, boardHeight, radius) {\r\n      this.boardWidth = boardWidth;\r\n      this.boardHeight = boardHeight;\r\n      this.radius = radius;\r\n      this.direction = -1;\r\n      this.cat1 = new Audio(cat1);\r\n      this.cat2 = new Audio(cat2);\r\n      this.goal = new Audio(goal);\r\n      this.start();\r\n  }\r\n  \r\n  start(){\r\n    this.x = this.boardWidth/2;\r\n    this.y = this.boardHeight/3;\r\n    this.vy = 0;\r\n    this.vx = 0;\r\n    if(document.addEventListener('keydown', (event) => {\r\n      if(event.key === KEYS.start) {\r\n        while (this.vy === 0){\r\n          this.vy = Math.floor(Math.random()*2 - 1);\r\n          this.vx = this.direction * (2-Math.abs(this.vy));\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  reset(){\r\n    this.x = this.boardWidth/2;\r\n    this.y = this.boardHeight/2;\r\n    this.vy = 0;\r\n    this.vx = 0;\r\n    while (this.vy === 0){\r\n      this.vy = Math.floor(Math.random()*2 - 1);\r\n    }\r\n    this.vx = this.direction * (2-Math.abs(this.vy));\r\n  }\r\n\r\n  wallCollision() {\r\n    const hitsTop = this.y - this.radius <= 0;\r\n    const hitsBottom = this.y + this.radius >= this.boardHeight;\r\n    if (hitsTop || hitsBottom) {\r\n      this.vy = this.vy * -1;\r\n    }\r\n  }\r\n\r\n  goalCollision(player1, player2) {\r\n    if (this.x <= 0) {\r\n      player2.increaseScore();\r\n      this.direction = this.direction * -1;\r\n      this.goal.play();\r\n      player2.paddleSizeChange();\r\n      this.reset();\r\n      player2.endGame(\"Right side win!\");\r\n    } else if (this.x >= this.boardWidth) {\r\n      player1.increaseScore();\r\n      this.direction = this.direction * -1;\r\n      this.goal.play();\r\n      player1.paddleSizeChange();\r\n      this.reset();\r\n      player1.endGame(\"Left side win!\");\r\n    }\r\n  }\r\n\r\n  paddleCollision(player1, player2) {\r\n    if (this.vx > 0) {\r\n      const p2 = player2.getCoordinates();\r\n      if (this.x + this.radius >= p2.left &&\r\n          this.x + this.radius <= p2.right &&\r\n          this.y + this.radius >= p2.top &&\r\n          this.y - this.radius <= p2.bottom) {\r\n            this.cat1.play();\r\n            this.vx = this.vx * -1;\r\n          }\r\n    } else {\r\n      const p1 = player1.getCoordinates();\r\n      if (this.x - this.radius <= p1.right &&\r\n          this.x - this.radius >= p1.left &&\r\n          this.y + this.radius >= p1.top &&\r\n          this.y - this.radius <= p1.bottom) {\r\n            this.cat2.play();\r\n            this.vx = this.vx * -1;\r\n        }\r\n      }\r\n    }\r\n\r\n  render(svg, player1, player2){\r\n    let circle = document.createElementNS(SVG_NS, 'circle');\r\n    circle.setAttributeNS(null, \"fill\", \"lightgreen\");\r\n    circle.setAttributeNS(null, \"r\", this.radius);\r\n    circle.setAttributeNS(null, \"cx\", this.x);\r\n    circle.setAttributeNS(null, \"cy\", this.y);\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n    this.wallCollision();\r\n    this.paddleCollision(player1, player2);\r\n    this.goalCollision(player1, player2);\r\n    svg.appendChild(circle);\r\n\r\n  }\r\n}","import {SVG_NS, TEXT_SIZE} from '../settings';\r\n\r\nexport default class Score {\r\n  constructor(xPosition, yPosition) {\r\n      this.x = xPosition;\r\n      this.y = yPosition;\r\n  }\r\n  render(svg, score){\r\n    let text = document.createElementNS(SVG_NS, 'text');\r\n    text.setAttributeNS(null, \"fill\", \"white\");\r\n    text.setAttributeNS(null, \"font-size\", TEXT_SIZE);\r\n    text.setAttributeNS(null, \"font-family\", \"'Silkscreen Web', monotype\");\r\n    text.setAttributeNS(null, \"x\", this.x);\r\n    text.setAttributeNS(null, \"y\", this.y);\r\n    text.textContent = score;\r\n    svg.appendChild(text);\r\n    \r\n  }\r\n}","import {SVG_NS, PADDLE_HEIGHT, PADDLE_WIDTH, BOARD_GAP, KEYS, RADIUS,} from '../settings';\nimport Board from './Board';\nimport Paddle from './Paddle';\nimport Ball from './Ball';\nimport Ball2 from './Ball2';\nimport Ball3 from './Ball3';\nimport Score from './Score';\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    this.paused = false;\n\n    this.gameElement = document.getElementById(this.element);\n    this.board = new Board(this.width, this.height);\n    const boardMid = (this.height - PADDLE_HEIGHT)/2;\n    this.paddle1 = new Paddle(this.height, PADDLE_WIDTH, PADDLE_HEIGHT, BOARD_GAP, boardMid, KEYS.p1up, KEYS.p1down);\n    const paddle2Gap = this.width-BOARD_GAP-PADDLE_WIDTH;\n    this.paddle2 = new Paddle(this.height, PADDLE_WIDTH, PADDLE_HEIGHT, paddle2Gap, boardMid, KEYS.p2up, KEYS.p2down);\n    this.ball = new Ball(this.width, this.height, RADIUS);\n    this.ball2 = new Ball2(this.width, this.height, RADIUS);\n    this.ball3 = new Ball3(this.width, this.height, RADIUS);\n    this.score1 = new Score(this.width/2 - 50, 30);\n    this.score2 = new Score(this.width/2 + 25, 30);\n    document.addEventListener('keydown', (event) => {\n      if(event.key === KEYS.pause) {\n        this.paused = !this.paused;\n      }\n    });\n    // Other code goes here...\n  }\n\n  render() {\n    if (this.paused) {\n      return;\n    }\n    this.gameElement.innerHTML = '';\n    let svg = document.createElementNS(SVG_NS, 'svg');\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewbox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg);\n\n    this.board.render(svg);\n    this.paddle1.render(svg);\n    this.paddle2.render(svg);\n    this.score1.render(svg, this.paddle1.getScore());\n    this.score2.render(svg, this.paddle2.getScore());\n    this.ball.render(svg, this.paddle1, this.paddle2);\n    if(this.paddle1.getScore() >= 3 && this.paddle2.getScore() >= 3){\n      this.ball2.render(svg, this.paddle1, this.paddle2);\n    }\n    if (this.paddle1.getScore() >= 7 && this.paddle2.getScore() >= 7) {\n      this.ball3.render(svg, this.paddle1, this.paddle2);\n    }\n  }\n}\n\n","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}